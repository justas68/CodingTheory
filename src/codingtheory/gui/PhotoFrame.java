/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codingtheory.gui;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

import codingtheory.logic.*;

/**
 * @author tvari
 */
public class PhotoFrame extends javax.swing.JFrame {

	private final Matrix matrix;
	private final Encoder encoder;
	private final Decoder decoder;
	private Channel channel;
	private BufferedImage image;
	private int[] imagePixels;

	/**
	 * Creates new form PhotoFrame
	 */

	public PhotoFrame(Matrix matrix, Encoder encoder, Decoder decoder) {
		this.matrix = matrix;
		this.encoder = encoder;
		this.decoder = decoder;
		initComponents();

		setDefaultCloseOperation(HIDE_ON_CLOSE);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	//Automatiškai generuotas kodas
	private void initComponents() {

		pictureWithEncoding = new javax.swing.JLabel();
		originalPicture = new javax.swing.JLabel();
		pictureWithNoEncoding = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jLabel4 = new javax.swing.JLabel();
		jTextField1 = new javax.swing.JTextField();
		jButton2 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText("Pradinis paveikslėlis:");

		jLabel2.setText("Persiųstas paveikslėlis be kodavimo:");

		jLabel3.setText("Persiųstas paveikslėlis su kodavimu:");

		jButton1.setText("Pasirinkti paveiksleli");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jLabel4.setText("Klaidos tikimybė:");

		jTextField1.setText("0.01");

		jButton2.setText("Siusti");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addContainerGap(53, Short.MAX_VALUE)
												.addComponent(originalPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 420,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(18, 18, 18)
												.addComponent(pictureWithNoEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 420,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(layout.createSequentialGroup()
																.addGap(87, 87, 87)
																.addComponent(jLabel1))
														.addGroup(layout.createSequentialGroup()
																.addGap(62, 62, 62)
																.addComponent(jButton1)
																.addGap(99, 99, 99)
																.addComponent(jLabel4)
																.addGap(18, 18, 18)
																.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 65,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)))
												.addGap(65, 65, 65)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(jLabel2)
														.addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGap(0, 0, Short.MAX_VALUE)))
								.addGap(18, 18, 18)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jLabel3)
										.addComponent(pictureWithEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 420,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap())
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jButton1)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel4)
												.addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(jButton2)))
								.addGap(38, 38, 38)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(jLabel1)
										.addComponent(jLabel2)
										.addComponent(jLabel3))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(originalPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
										.addComponent(pictureWithNoEncoding, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(pictureWithEncoding, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
								.addContainerGap(49, Short.MAX_VALUE))
		);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	//Paveikslėlio įkėlimo metodas
	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
		jfc.setDialogTitle("Pasirinkite paveiksleli");
		jfc.setAcceptAllFileFilterUsed(false);
		FileNameExtensionFilter filter = new FileNameExtensionFilter("image(bmp)", "bmp");
		jfc.addChoosableFileFilter(filter);
		int returnValue = jfc.showOpenDialog(null);
		if (returnValue == JFileChooser.APPROVE_OPTION) {
			try {
				File selectedFile = jfc.getSelectedFile();
				this.image = ImageIO.read(selectedFile);
				//Prieš atvaizduojant pakeičia paveikslėlio dydį
				Image dimg = image.getScaledInstance(originalPicture.getWidth(), originalPicture.getHeight(),
						Image.SCALE_SMOOTH);

				originalPicture.setIcon(new ImageIcon(dimg));
				//Suskaičiuoja, kiek pixeliu turi paveikslėlis
				int byteSize = this.image.getHeight() * this.image.getWidth();
				int currentPosition = 0;
				//Šių pixeliu reikšmes nukopijuoja
				this.imagePixels = new int[byteSize];
				for (int i = 0; i < this.image.getWidth(); i++) {
					for (int j = 0; j < this.image.getHeight(); j++) {
						this.imagePixels[currentPosition] = this.image.getRGB(i, j);
						currentPosition++;
					}
				}
			} catch (IOException ex) {
				Logger.getLogger(PhotoFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
	}//GEN-LAST:event_jButton1ActionPerformed

	//Paveikslėlio siuntimas kanalu neužkodavus ir užkodavus
	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

		//Išsaugo įvestą klaidos tikimybę, pagal ją sukonfiguroja kanalą
		double errorProbability = Double.parseDouble(jTextField1.getText().replace(",", "."));
		this.channel = new Channel(errorProbability);

		//Pixelius paverčia į dvejatainę eilutę, bei išsaugo, kokią eilutės dalį užima kiekvienas pixelis
		int[] convertedLengths = new int[this.imagePixels.length];
		String pixels = pixelsToString(this.imagePixels, convertedLengths);

		//Siunčia paveikslėlį kanalu jį užkoduojant
		int[] imageWithEncoding = stringToPixels(Util.sendMessageWithEncoding(pixels, matrix, encoder, channel, decoder), convertedLengths);

		//Nukopijuoja pradinį paveikslėlį
		BufferedImage image2 = deepCopy(this.image);
		int currentPosition = 0;
		//Pakeičia pradinio paveikslėlio pixelius gautais iš kanalo
		for (int i = 0; i < this.image.getWidth(); i++) {
			for (int j = 0; j < this.image.getHeight(); j++) {
				image2.setRGB(i, j, imageWithEncoding[currentPosition]);
				currentPosition++;
			}
		}
		//Atvaizduoja gautą paveikslėlį
		Image dimg2 = image2.getScaledInstance(originalPicture.getWidth(), originalPicture.getHeight(),
				Image.SCALE_SMOOTH);
		pictureWithEncoding.setIcon(new ImageIcon(dimg2));

		//Atlieka tą patį kaip ir viršuje, tik nekoduoja
		int[] imageWithoutEncoding = stringToPixels(Util.sendMessageWithNoEncoding(pixels, channel, matrix.getRows()), convertedLengths);
		BufferedImage image1 = deepCopy(this.image);
		currentPosition = 0;

		for (int i = 0; i < this.image.getWidth(); i++) {
			for (int j = 0; j < this.image.getHeight(); j++) {
				image1.setRGB(i, j, imageWithoutEncoding[currentPosition]);
				currentPosition++;
			}
		}
		Image dimg1 = image1.getScaledInstance(originalPicture.getWidth(), originalPicture.getHeight(),
				Image.SCALE_SMOOTH);
		pictureWithNoEncoding.setIcon(new ImageIcon(dimg1));


	}//GEN-LAST:event_jButton2ActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	//Automatiškai generuotas kodas
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JTextField jTextField1;
	private javax.swing.JLabel originalPicture;
	private javax.swing.JLabel pictureWithEncoding;
	private javax.swing.JLabel pictureWithNoEncoding;
	// End of variables declaration//GEN-END:variables

	//Pixelius konvertuoja į dvejatainę eilutę, išsaugo, kokią eilutės dalį užima kiekvienas pixelis
	private String pixelsToString(int[] image, int[] convertedLengths) {
		String result = "";
		for (int i = 0; i < image.length; i++) {
			String value = Integer.toBinaryString(image[i]);
			result += value;
			convertedLengths[i] = value.length();
		}
		return result;
	}

	//Dvejatainę eilutę konvertuoja į pixelių masyvą, naudodamas masyvą, kuris nurodo kokio ilgio yra kiekvienas pixelis
	private int[] stringToPixels(String image, int[] convertedLengths) {
		int[] pixels = new int[convertedLengths.length];
		int currentPosition = 0;
		for (int i = 0; i < convertedLengths.length; i++) {
			pixels[i] = new BigInteger(image.substring(currentPosition, currentPosition + convertedLengths[i]), 2).intValue();
			currentPosition += convertedLengths[i];
		}
		return pixels;
	}

	//Nukopijuoja gautą paveikslėlį
	private BufferedImage deepCopy(BufferedImage image) {
		ColorModel cm = image.getColorModel();
		boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
		WritableRaster raster = image.copyData(null);
		return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
	}
}

