/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codingtheory.gui;

import codingtheory.logic.Channel;
import codingtheory.logic.Decoder;
import codingtheory.logic.Encoder;
import codingtheory.logic.Matrix;
import codingtheory.logic.Vector;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.DataBufferByte;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author tvari
 */
public class PhotoFrame extends javax.swing.JFrame {

    private final Matrix matrix;
    private final Encoder encoder;
    private final Decoder decoder;
    private Channel channel;
    private BufferedImage image;
    private int[] imagePixels;
    
    /**
     * Creates new form PhotoFrame
     */
    
        public PhotoFrame(Matrix matrix, Encoder encoder, Decoder decoder) {
        this.matrix = matrix;
        this.encoder = encoder;
        this.decoder = decoder;
        initComponents();
        
        setDefaultCloseOperation(HIDE_ON_CLOSE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pictureWithEncoding = new javax.swing.JLabel();
        originalPicture = new javax.swing.JLabel();
        pictureWithNoEncoding = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Pradinis paveikslėlis:");

        jLabel2.setText("Persiųstas paveikslėlis be kodavimo:");

        jLabel3.setText("Persiųstas paveikslėlis su kodavimu:");

        jButton1.setText("Pasirinkti paveiksleli");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Klaidos tikimybė:");

        jTextField1.setText("0.01");

        jButton2.setText("Siusti");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(53, Short.MAX_VALUE)
                        .addComponent(originalPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pictureWithNoEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jButton1)
                                .addGap(99, 99, 99)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(pictureWithEncoding, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(originalPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                    .addComponent(pictureWithNoEncoding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pictureWithEncoding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        jfc.setDialogTitle("Pasirinkite paveiksleli");
        jfc.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("image(bmp)", "bmp");
        jfc.addChoosableFileFilter(filter);
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = jfc.getSelectedFile();
                this.image = ImageIO.read(selectedFile);
                Image dimg = image.getScaledInstance(originalPicture.getWidth(), originalPicture.getHeight(),
                        Image.SCALE_SMOOTH);
               originalPicture.setIcon(new ImageIcon(dimg));
               int byteSize = this.image.getHeight() * this.image.getWidth();
               int currentPosition = 0;
               this.imagePixels = new int[byteSize];
               for (int i = 0; i < this.image.getWidth(); i++) {
                   for (int j = 0; j < this.image.getHeight(); j++) {
                       this.imagePixels[currentPosition] = this.image.getRGB(i, j);
                       currentPosition++;
                   }
               }
            } catch (IOException ex) {
                Logger.getLogger(PhotoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

        private int[] sendImageNoEncoding(String image) {   
        int sentBytes = 0;
        int bytesToSend = image.length();
        String receivedMessage = "";
        while (sentBytes <= bytesToSend - this.matrix.getRows()) {
            String batch = image.substring(sentBytes, sentBytes + this.matrix.getRows());
            Vector vectorToSend = new Vector(batch);
            int[] bytesArray = vectorToSend.getArray();
            channel.sendMessage(bytesArray);
            receivedMessage += (new Vector(bytesArray)).getArrayAsString();
            sentBytes += this.matrix.getRows();
        }
        if (bytesToSend != sentBytes) {
            String remainingMessage = image.substring(sentBytes);
            int zeroesAdded = 0;
            while (remainingMessage.length() < this.matrix.getRows()) {
                remainingMessage += "0";
                zeroesAdded++;
            }
            Vector vectorToSend = new Vector(remainingMessage);
            int[] bytesArray = vectorToSend.getArray();
            channel.sendMessage(bytesArray);
            receivedMessage += (new Vector(bytesArray)).getArrayAsString();  
            receivedMessage = receivedMessage.substring(0, receivedMessage.length() - zeroesAdded);
        }
        return stringToPixels(receivedMessage);
    }
        
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        double errorProbability = Double.parseDouble(jTextField1.getText());
        this.channel = new Channel(errorProbability);
        System.out.println(pixelsToString(this.imagePixels));
        int[] imageWithoutEncoding = sendImageNoEncoding(pixelsToString(this.imagePixels));
        BufferedImage image1 = deepCopy(this.image);
        int currentPosition = 0;
        
        for (int i = 0; i < this.image.getWidth(); i++) {
            for (int j = 0; j < this.image.getHeight(); j++) {
                this.image.setRGB(i, j, imageWithoutEncoding[currentPosition]);
                currentPosition++;
            }
        }

        Image dimg = image1.getScaledInstance(originalPicture.getWidth(), originalPicture.getHeight(),
                       Image.SCALE_SMOOTH);
        
        //String imageWithEncoding = sendImageWithEncoding(imageBinary);
        //byte[] imageWithEncodingSent = binaryToImage(imageWithEncoding);
        
        pictureWithNoEncoding.setIcon(new ImageIcon(dimg));
       // pictureWithEncoding.setIcon();
    }//GEN-LAST:event_jButton2ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel originalPicture;
    private javax.swing.JLabel pictureWithEncoding;
    private javax.swing.JLabel pictureWithNoEncoding;
    // End of variables declaration//GEN-END:variables
    
    private String imageToBinary(byte[] image) {
        StringBuilder binary = new StringBuilder();
        for (byte b : image) {
            int val = b;
            for (int i = 0; i < 8; i++) {
                binary.append((val & 128) == 0 ? 0 : 1);
                val <<= 1;
            }
        }
        return binary.toString();
    }
    
    private byte[] binaryToImage(String bytes) {
        List<String> splitted = Arrays.asList(bytes.split("(?<=\\G.{8})"));
        byte[] bytesArray = new byte[splitted.size()];
        List<Integer> bytesList = splitted.stream().map(byteValue -> Integer.parseInt(byteValue, 2)).collect(Collectors.toList());
        for (int i = 0; i < bytesList.size(); i++){
            if (bytesList.get(i) < 127) {
               bytesArray[i] = (byte)bytesList.get(i).byteValue();  
            } else {
               bytesArray[i] = (byte)(Integer.reverse(bytesList.get(i) << 24) & 0xff);
            }          
        }
        return bytesArray;
    }
    
    private String pixelsToString(int[] image) {
        String result = "";
        for (int i = 0; i<image.length; i++) {
            result += String.format("%32s", Integer.toBinaryString(image[i])).replace(' ', '0');
        }
        return result;
    }
    
    private int[] stringToPixels(String image) {
        String[] splitted = image.split("(?<=\\G.{32})");
        return Arrays.stream(splitted).mapToInt(pixel -> Integer.parseInt(pixel, 2)).toArray();
    }
    
    private BufferedImage deepCopy( BufferedImage image ) {
        ColorModel cm = image.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = image.copyData( null);
        return new BufferedImage( cm, raster, isAlphaPremultiplied, null);
    }
}

