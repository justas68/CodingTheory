/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codingtheory.gui;

import codingtheory.logic.Channel;
import codingtheory.logic.Decoder;
import codingtheory.logic.Encoder;
import codingtheory.logic.Matrix;
import codingtheory.logic.Vector;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

/**
 *
 * @author tvari
 */
public class MessageFrame extends javax.swing.JFrame {

    private final Matrix matrix;
    private final Encoder encoder;
    private final Decoder decoder;
    private Channel channel;
    /**
     * Creates new form MessageFrame
     */
    
    public MessageFrame(Matrix matrix, Encoder encoder, Decoder decoder) {
        this.matrix = matrix;
        this.encoder = encoder;
        this.decoder = decoder;
        initComponents();
        initMatrixField();
        setDefaultCloseOperation(HIDE_ON_CLOSE);
    }

    private void initMatrixField() {
        String matrix = "";
        for (int i = 0; i < this.matrix.getRows(); i++) {
              for (int j = 0; j < this.matrix.getColumns(); j++) {
                  matrix += String.valueOf(this.matrix.getMatrix()[i][j]);
                  if ( j != this.matrix.getColumns() - 1) matrix += " ";
              }
              if (i != this.matrix.getRows() - 1) matrix += System.lineSeparator();
          }
        generatingMatrixField.setText(matrix);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        generatingMatrixField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        sendMessageButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        errorProbabilityField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        messageWithoudCodingField = new javax.swing.JScrollPane();
        messageWithoutCodingField = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        messageWithCodingField = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageTextField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Generuojanti matrica:");

        jScrollPane1.setEnabled(false);

        generatingMatrixField.setEditable(false);
        generatingMatrixField.setBackground(new java.awt.Color(213, 213, 213));
        generatingMatrixField.setColumns(20);
        generatingMatrixField.setRows(5);
        generatingMatrixField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(generatingMatrixField);

        jLabel2.setText("Žinutė:");

        sendMessageButton.setText("Siųsti");
        sendMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMessageButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Be kodavimo:");

        jLabel4.setText("Su kodavimu:");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel5.setText("Klaidos tikimybė:");

        messageWithoudCodingField.setBackground(new java.awt.Color(204, 204, 204));
        messageWithoudCodingField.setEnabled(false);

        messageWithoutCodingField.setEditable(false);
        messageWithoutCodingField.setBackground(new java.awt.Color(240, 240, 240));
        messageWithoutCodingField.setColumns(20);
        messageWithoutCodingField.setRows(5);
        messageWithoudCodingField.setViewportView(messageWithoutCodingField);

        messageWithCodingField.setEditable(false);
        messageWithCodingField.setBackground(new java.awt.Color(240, 240, 240));
        messageWithCodingField.setColumns(20);
        messageWithCodingField.setRows(5);
        jScrollPane2.setViewportView(messageWithCodingField);

        messageTextField.setColumns(20);
        messageTextField.setRows(5);
        jScrollPane3.setViewportView(messageTextField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(387, 387, 387))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(errorProbabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(sendMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel3)
                                .addGap(234, 234, 234))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(messageWithoudCodingField, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 777, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel1)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(sendMessageButton)
                                .addComponent(jLabel5)
                                .addComponent(errorProbabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(messageWithoudCodingField, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMessageButtonActionPerformed
        double errorProbability = Double.parseDouble(errorProbabilityField.getText());
        this.channel = new Channel(errorProbability);
        String message = messageTextField.getText();
        String messageWithoutEncoding = sendMessageNoEncoding(message);
        String messageWithEncoding = sendMessaageWithEncoding(message);
        messageWithCodingField.setText(messageWithEncoding);
        messageWithoutCodingField.setText(messageWithoutEncoding);
        
    }//GEN-LAST:event_sendMessageButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField errorProbabilityField;
    private javax.swing.JTextArea generatingMatrixField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextArea messageTextField;
    private javax.swing.JTextArea messageWithCodingField;
    private javax.swing.JScrollPane messageWithoudCodingField;
    private javax.swing.JTextArea messageWithoutCodingField;
    private javax.swing.JButton sendMessageButton;
    // End of variables declaration//GEN-END:variables

    private String sendMessageNoEncoding(String messageInASCII) {   
        String message = messageToBytes(messageInASCII);
        int sentBytes = 0;
        int bytesToSend = message.length();
        String receivedMessage = "";
        while (sentBytes <= bytesToSend - this.matrix.getRows()) {
            String batch = message.substring(sentBytes, sentBytes + this.matrix.getRows());
            Vector vectorToSend = new Vector(batch);
            int[] bytesArray = vectorToSend.getArray();
            channel.sendMessage(bytesArray);
            receivedMessage += (new Vector(bytesArray)).getArrayAsString();
            sentBytes += this.matrix.getRows();
        }
        if (bytesToSend != sentBytes) {
            String remainingMessage = message.substring(sentBytes);
            int zeroesAdded = 0;
            while (remainingMessage.length() < this.matrix.getRows()) {
                remainingMessage += "0";
                zeroesAdded++;
            }
            Vector vectorToSend = new Vector(remainingMessage);
            int[] bytesArray = vectorToSend.getArray();
            channel.sendMessage(bytesArray);
            receivedMessage += (new Vector(bytesArray)).getArrayAsString();  
            receivedMessage = receivedMessage.substring(0, receivedMessage.length() - zeroesAdded);
        }
        return bytesToMessage(receivedMessage);
    }

    private String sendMessaageWithEncoding(String messageInASCII) {
        String message = messageToBytes(messageInASCII);
        int sentBytes = 0;
        int bytesToSend = message.length();
        String decodedMessage = "";
        while (sentBytes <= bytesToSend - this.matrix.getRows()) {
            String batch = message.substring(sentBytes, sentBytes + this.matrix.getRows());
            Vector vectorToSend = new Vector(batch);
            int[] bytesArray = vectorToSend.getArray();
            int[] encodedArray = encoder.encode(bytesArray).getArray();
            channel.sendMessage(encodedArray);
            Vector decodedVector = this.decoder.decodeVector(new Vector(encodedArray));
            decodedMessage += decodedVector.getArrayAsString();
            sentBytes += this.matrix.getRows();
        }
        if (bytesToSend != sentBytes) {
            String remainingMessage = message.substring(sentBytes);
            int zeroesAdded = 0;
            while (remainingMessage.length() < this.matrix.getRows()) {
                remainingMessage += "0";
                zeroesAdded++;
            }
            Vector vectorToSend = new Vector(remainingMessage);
            int[] bytesArray = vectorToSend.getArray();
            int[] encodedArray = encoder.encode(bytesArray).getArray();
            channel.sendMessage(encodedArray);
            Vector decodedVector = this.decoder.decodeVector(new Vector(encodedArray));
            decodedMessage = decodedMessage.substring(0, decodedMessage.length() - zeroesAdded);
            decodedMessage += decodedVector.getArrayAsString();  
        }
        return bytesToMessage(decodedMessage);
    }
    
    private String messageToBytes(String message) {
        byte[] bytes = message.getBytes();
        StringBuilder binary = new StringBuilder();
        for (byte b : bytes) {
            int val = b;
            for (int i = 0; i < 8; i++) {
                binary.append((val & 128) == 0 ? 0 : 1);
                val <<= 1;
            }
        }
        return binary.toString();
    }
    
    private String bytesToMessage(String bytes) {
        List<String> splitted = Arrays.asList(bytes.split("(?<=\\G.{8})"));
        String result = "";
        List<Integer> bytesList = splitted.stream().map(byteValue -> Integer.parseInt(byteValue, 2)).collect(Collectors.toList());
        for (int i = 0; i < bytesList.size(); i++){
            if (bytesList.get(i) < 127) {
               result += String.valueOf((char)bytesList.get(i).byteValue());  
            } else {
               result += String.valueOf((char)Integer.reverse(bytesList.get(i) << 24) & 0xff);
            }          
        }
        return result;
    }
}
